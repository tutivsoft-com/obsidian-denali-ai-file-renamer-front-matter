/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var Z=Object.defineProperty;var le=Object.getOwnPropertyDescriptor;var oe=Object.getOwnPropertyNames;var re=Object.prototype.hasOwnProperty;var de=(f,s)=>{for(var e in s)Z(f,e,{get:s[e],enumerable:!0})},ue=(f,s,e,i)=>{if(s&&typeof s=="object"||typeof s=="function")for(let t of oe(s))!re.call(f,t)&&t!==e&&Z(f,t,{get:()=>s[t],enumerable:!(i=le(s,t))||i.enumerable});return f};var pe=f=>ue(Z({},"__esModule",{value:!0}),f);var Ae={};de(Ae,{default:()=>F});module.exports=pe(Ae);var r=require("obsidian"),W=require("obsidian"),ce="sk-or-v1-wxy0iKby1BctSGfpoAtzZPhzk65ZTehRYmOTxuLIAcd7",ge="yurUZrPAsw$axLtL2q7YXzAn4dDz&es7WPi2i7TmHn2MD!3Ri*ie$J*9f7tx",he=256,me=1e5,fe="https://raw.githubusercontent.com/tutivsoft-com/critical-repository/refs/heads/main/Denali_AI_api_v2.txt";async function ye(f,s){let e=new TextEncoder,i=await window.crypto.subtle.importKey("raw",e.encode(f),{name:"PBKDF2"},!1,["deriveBits","deriveKey"]);return window.crypto.subtle.deriveKey({name:"PBKDF2",salt:e.encode(s),iterations:me,hash:"SHA-256"},i,{name:"AES-CBC",length:he},!0,["encrypt","decrypt"])}async function Y(f){if(!f)return null;try{let s=await ye(ce,ge),e=Uint8Array.from(atob(f),p=>p.charCodeAt(0)),i=e.slice(0,16),t=e.slice(16),a=await window.crypto.subtle.decrypt({name:"AES-CBC",iv:i},s,t),l=new TextDecoder().decode(a),n=a[a.byteLength-1];if(n>0&&n<=16){let p=new Uint8Array(a.slice(a.byteLength-n));if(Array.from(p).every(u=>u===n))return new TextDecoder().decode(a.slice(0,a.byteLength-n))}return l}catch(s){return console.error("Denali AI: Failed to decrypt API key:",s),null}}function ie(f,s){let e=f.getFullYear().toString(),i=(f.getMonth()+1).toString().padStart(2,"0"),t=f.getDate().toString().padStart(2,"0"),a=f.getHours().toString().padStart(2,"0"),l=f.getMinutes().toString().padStart(2,"0"),n=f.getSeconds().toString().padStart(2,"0");return s.replace(/YYYY/g,e).replace(/MM/g,i).replace(/DD/g,t).replace(/HH/g,a).replace(/mm/g,l).replace(/ss/g,n)}var ae="free";function E(f){switch(f){case"free":return{maxFilesPerMonth:10,dailyFileLimit:3,batchRenameLimit:3,maxInputLength:1e3,maxOutputLength:50};case"pro":return{maxFilesPerMonth:1e3,dailyFileLimit:300,batchRenameLimit:300,maxInputLength:3e3,maxOutputLength:500};case"ultimate":return{maxFilesPerMonth:8e3,dailyFileLimit:300,batchRenameLimit:3e3,maxInputLength:1e4,maxOutputLength:1e3};default:return console.warn(`Denali AI: Unknown user plan '${f}'. Defaulting to 'free'.`),E("free")}}var V={keywordFilled:'Based on the following text, generate a good and useful filename. The filename should be a healthy mixture of context, breadth, and depth, similar to the style of "Code Python Tensorflow Johsnson AI Project memory second fix". The filename must not exceed {max_output_length} characters. Dont send any extra text - just give back one simple line of text ONLY',balanced:'Based on the following text, generate a concise, human-readable filename that uses a title case style, similar to the example "Apple Inc Annual Report for 2025". The filename must not exceed {max_output_length} characters. Respond with only the filename and nothing else.',nicheWordsOnly:'Based on the following text, extract only the most specific, niche keywords and terms, similar to the example "apple report 2025 john reviewed approved emergency fix2". The filename must not exceed {max_output_length} characters. Respond with only the filename and nothing else.'},H=E(ae),q={openRouterApiKey:"rilJBr1VssVV0/IvIe3s5EqG3JNdy32vfbnJlyJ3VU8/vDg+CB3aUqtPir6eziFoQGtaVkyCSSN9J1J1Mbpuc4ZBjGI2lRlHgcjOEWeO5nV5E4mUMzB/OTeKEY566h/",customPrompt:V.balanced,aiModel:"openai/gpt-5-mini",untitledKeywords:"Untitled,New Text Document",renameOnCreation:!1,useFrontmatter:!0,lookForUntitled:!1,maxInputLength:H.maxInputLength,maxOutputLength:H.maxOutputLength,backupEnabled:!1,backupFolder:"Denali-Backup",timestampFormat:"none",fileNameCase:"original",addAlias:!1,showRenameModal:!0,modalCloseDelay:1,aiNameStyle:"balanced",stopWords:"a, an, the, and, but, or, for, nor, so, yet, at, by, from, in, into, of, off, on, onto, to, with",characterReplacement:"-",autoSubfolder:!1,logEnabled:!0,renameTimestampFormat:"none",logFileEnabled:!0,renameChoice:"automatic",addTitle:!0,titlePrompt:"Based on the following note content, generate a concise, human-readable title for the note. Respond with only the title and nothing else.",addCreatedDate:!0,createdDateFormat:"YYYY-MM-DD HH:mm",addModifiedDate:!0,modifiedDateFormat:"YYYY-MM-DD HH:mm",addAuthor:!1,authorPrompt:"Based on the following note, guess the author or source name. Respond with only the author name and nothing else.",addStatus:!0,statusDefaultValue:"draft",addProject:!1,projectPrompt:"Based on the following note content, suggest a project name. Respond with only the name of the project and nothing else.",addTopic:!1,topicPrompt:"Based on the following note content, suggest a single, broad topic or category. Respond with only the topic and nothing else.",userPlan:ae,maxFilesPerMonth:H.maxFilesPerMonth,dailyFileLimit:H.dailyFileLimit,batchRenameLimit:H.batchRenameLimit,displayRenameProcessChoice:!0,displayRenameOnCreation:!1,displayUntitledKeywords:!0,displayLookForUntitled:!0,displayAutoSubfolder:!1,displayOpenRouterApiKey:!1,displayAiModel:!1,displayAiNameStyle:!1,displayCustomPrompt:!1,displayMaxInputLength:!0,displayMaxOutputLength:!0,displayFileNameCase:!0,displayRenameTimestampFormat:!0,displayStopWords:!0,displayCharacterReplacement:!0,displayUseFrontmatter:!0,displayAddAlias:!0,displayAddTitle:!0,displayTitlePrompt:!0,displayAddCreatedDate:!0,displayCreatedDateFormat:!0,displayAddModifiedDate:!0,displayModifiedDateFormat:!0,displayAddAuthor:!1,displayAuthorPrompt:!1,displayAddStatus:!0,displayStatusDefaultValue:!0,displayAddProject:!1,displayProjectPrompt:!1,displayAddTopic:!1,displayTopicPrompt:!1,displayBackupEnabled:!1,displayBackupFolder:!1,displayBackupTimestampFormat:!1,displayLogEnabled:!0,displayLogFileEnabled:!1,displayModalCloseDelay:!0,displayResetSettings:!0,displayDeleteDenaliFolderButton:!0,displayMainWorkflowHeader:!0,displayAiApiHeader:!0,displayFileNamingHeader:!0,displayFrontmatterHeader:!0,displayBackupLogHeader:!0,displayResetHeader:!0,resetSettings:!0,displayUserPlan:!0,displayMaxFilesPerMonth:!0,displayDailyFileLimit:!0,displayBatchRenameLimit:!0,userLicenseKey:"",proLicenseKeys:[],ultimateLicenseKeys:[],displayUserLicenseKey:!0,displayApplyLicenseButton:!0,paymentType:"one-time",availableCredits:0,initialFreeCreditsGranted:!1,displayPaymentType:!0,displayAvailableCredits:!0,usedLicenseKeys:[]},be=["openai/gpt-5-mini","google/gemini-2.5-flash-lite","mistralai/mistral-7b-instruct","openai/gpt-3.5-turbo","google/gemma-7b-it","google/gemma-7b","nousresearch/nous-hermes-2-mixtral-8x7b-dpo"],z=class extends r.Modal{constructor(e,i,t,a,l=()=>{}){super(e);this.titleEl.setText(i),this.message=t,this.onConfirm=a,this.onCancel=l}onOpen(){let{contentEl:e}=this;e.createEl("p",{text:this.message}),new r.Setting(e).addButton(i=>{i.setButtonText("Confirm").setCta().onClick(()=>{this.close(),this.onConfirm()})}).addButton(i=>{i.setButtonText("Cancel").onClick(()=>{this.close(),this.onCancel()})})}onClose(){let{contentEl:e}=this;e.empty()}},R=class extends r.Plugin{constructor(){super(...arguments);this.renameModal=null}async onload(){await this.loadSettings(),await this.loadLicenseKeysFromFile(),this.settings.backupFolder=R.BACKUP_SUBFOLDER,this.settings.paymentType==="one-time"&&!this.settings.initialFreeCreditsGranted&&(this.settings.availableCredits+=10,this.settings.initialFreeCreditsGranted=!0,await this.saveSettings(),new r.Notice("You have been granted 10 free Denali AI credits!",5e3));let e=await this.performInitialApiValidation();this.addSettingTab(new ee(this.app,this)),this.addCommand({id:"open-denali-ai-options",name:"Open Denali AI Options",callback:()=>{this.renameModal&&this.renameModal.close(),this.renameModal=new C(this.app,this,null),this.renameModal.open()}}),this.addCommand({id:"rename-current-file-denali-ai",name:"Rename current file with Denali AI",checkCallback:i=>{let t=this.app.workspace.getActiveFile();return t&&t.extension==="md"?(i||(this.renameModal&&this.renameModal.close(),this.renameModal=new C(this.app,this,t),this.renameModal.open()),!0):!1}}),this.registerEvent(this.app.workspace.on("file-menu",(i,t)=>{t instanceof r.TFile&&t.extension==="md"?i.addItem(a=>{a.setTitle("Rename File with Denali AI").setIcon("pencil-ruler").onClick(()=>{this.renameModal&&this.renameModal.close(),this.renameModal=new C(this.app,this,t),this.renameModal.open()})}):t instanceof r.TFolder&&i.addItem(a=>{a.setTitle("Batch Rename Folder with Denali AI").setIcon("folder-edit").onClick(()=>{this.renameModal&&this.renameModal.close(),this.renameModal=new C(this.app,this,t),this.renameModal.open()})})})),this.registerEvent(this.app.workspace.on("editor-menu",(i,t,a)=>{let l=this.app.workspace.getActiveFile();l&&l.extension==="md"&&i.addItem(n=>{n.setTitle("Rename File with Denali AI").setIcon("pencil-ruler").onClick(()=>{this.renameModal&&this.renameModal.close(),this.renameModal=new C(this.app,this,l),this.renameModal.open()})})})),this.registerEvent(this.app.vault.on("create",i=>{this.settings.renameOnCreation&&i instanceof r.TFile&&i.extension==="md"&&this.settings.untitledKeywords.split(",").map(a=>a.trim()).some(a=>i.name.startsWith(a))&&(this.renameModal&&this.renameModal.close(),this.renameModal=new C(this.app,this,i),this.renameModal.open())}))}onunload(){this.renameModal&&this.renameModal.close()}async loadSettings(){this.settings=Object.assign({},q,await this.loadData());let e=E(this.settings.userPlan);this.settings.maxInputLength>e.maxInputLength&&(this.settings.maxInputLength=e.maxInputLength),this.settings.maxOutputLength>e.maxOutputLength&&(this.settings.maxOutputLength=e.maxOutputLength),this.settings.paymentType==="subscription"?(this.settings.maxFilesPerMonth=e.maxFilesPerMonth,this.settings.dailyFileLimit=e.dailyFileLimit,this.settings.batchRenameLimit=e.batchRenameLimit):(this.settings.maxFilesPerMonth=0,this.settings.dailyFileLimit=0,this.settings.batchRenameLimit=0)}async saveSettings(){await this.saveData(this.settings)}async deleteDenaliFolder(){let e=this.app.vault.getAbstractFileByPath(R.DENALI_FOLDER);if(e instanceof r.TFolder)await this.app.vault.delete(e,!0);else throw new Error(`The folder "${R.DENALI_FOLDER}" does not exist or is not a folder.`)}async loadLicenseKeysFromFile(){try{let e=this.manifest.dir;if(!e){console.error("Denali AI: Plugin directory not found."),new r.Notice("Denali AI: Plugin directory not found, cannot load license keys.",5e3);return}let i=`${e}/${R.LICENSE_KEYS_BUNDLE_FILE}`,t=await this.app.vault.adapter.read(i),a=JSON.parse(t);a.pro&&Array.isArray(a.pro)?this.settings.proLicenseKeys=a.pro.map(l=>l.trim()).filter(l=>l.length>0):console.warn("Denali AI: No 'pro' keys found or invalid format in bundled license_keys.json."),a.ultimate&&Array.isArray(a.ultimate)?this.settings.ultimateLicenseKeys=a.ultimate.map(l=>l.trim()).filter(l=>l.length>0):console.warn("Denali AI: No 'ultimate' keys found or invalid format in bundled license_keys.json.")}catch(e){console.error("Denali AI: Failed to load bundled license keys:",e),new r.Notice("Denali AI: Failed to load bundled license keys. Ensure 'license_keys.json' is present and valid in the plugin folder.",5e3)}}async validateLicenseKey(e){if(!e)return"free";if(this.settings.paymentType==="one-time"&&this.settings.usedLicenseKeys.includes(e))return new r.Notice("This license key has already been used and cannot be reused for credits.",7e3),console.warn(`Denali AI: Attempted reuse of license key: ${e}`),"free";let i="free",t=0;for(let a of this.settings.ultimateLicenseKeys)if(await Y(a)===e){i="ultimate",t=500;break}if(i==="free"){for(let a of this.settings.proLicenseKeys)if(await Y(a)===e){i="pro",t=25;break}}return i!=="free"&&(this.settings.userPlan=i,this.settings.paymentType==="one-time"?(this.settings.availableCredits+=t,this.settings.usedLicenseKeys.push(e),new r.Notice(`License key validated! Added ${t} credits. Total credits: ${this.settings.availableCredits}`,5e3)):new r.Notice(`License key validated! Your plan is now: ${i.toUpperCase()}`,5e3),await this.saveSettings()),i}async testOpenRouterConnection(e,i){if(!e)return console.warn("Denali AI: No API key provided for connection test."),!1;let t={model:i,messages:[{role:"user",content:"Hello"}],temperature:.01,max_tokens:10};try{let a=await(0,W.requestUrl)({url:"https://openrouter.ai/api/v1/chat/completions",method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},body:JSON.stringify(t)});return a.status===200&&a.json&&a.json.choices&&a.json.choices.length>0?!0:(console.warn(`Denali AI: API connection test failed with status ${a.status}. Response:`,a.json),!1)}catch(a){return console.error(`Denali AI: API connection test encountered an error: ${a.message}`,a),!1}}async performInitialApiValidation(){new r.Notice("Denali AI: Checking API connection...",3e3);let e="google/gemini-2.5-flash-lite",i=this.settings.openRouterApiKey;if(i){let t=await Y(i);if(t){if(new r.Notice("Denali AI: Validating primary API key...",2e3),await this.testOpenRouterConnection(t,e))return new r.Notice("Denali AI: Primary API key validated successfully.",3e3),!0;new r.Notice("Denali AI: Primary API key failed validation. Trying backup keys...",4e3),console.warn("Denali AI: Primary API key failed validation.")}else new r.Notice("Denali AI: Primary API key could not be decrypted. Trying backup keys...",4e3),console.warn("Denali AI: Primary API key decryption failed.")}else new r.Notice("Denali AI: No primary API key configured. Trying backup keys...",4e3),console.warn("Denali AI: No primary API key configured.");try{new r.Notice("Denali AI: Fetching backup API keys...",3e3);let t=await(0,W.requestUrl)({url:fe,method:"GET"});if(t.status===200){let a=t.text.split(`
`).map(l=>l.trim()).filter(l=>l.length>0);if(a.length===0)new r.Notice("Denali AI: No backup API keys found on the web page.",5e3),console.warn("Denali AI: No backup API keys found.");else for(let l of a){new r.Notice("Denali AI: Validating a backup API key...",2e3);let n=await Y(l);if(n&&await this.testOpenRouterConnection(n,e))return new r.Notice("Denali AI: A backup API key validated successfully. Using it.",5e3),this.settings.openRouterApiKey=l,await this.saveSettings(),!0}}else new r.Notice(`Denali AI: Failed to fetch backup API keys from URL (Status: ${t.status}).`,5e3),console.error(`Denali AI: Failed to fetch backup API keys. Status: ${t.status}`)}catch(t){new r.Notice(`Denali AI: Error fetching or processing backup API keys: ${t.message}`,8e3),console.error(`Denali AI: Error during backup API key process: ${t.message}`,t)}return new r.Notice("Denali AI: All API keys failed validation. Please contact support at denali_ai_support@tutivsoft.com",1e4),console.error("Denali AI: All API keys (primary and backup) failed validation."),!1}},F=R;F.DENALI_FOLDER="Denali AI",F.BACKUP_SUBFOLDER=`${R.DENALI_FOLDER}/Backups`,F.LOGS_SUBFOLDER=`${R.DENALI_FOLDER}/Logs`,F.LICENSE_KEYS_BUNDLE_FILE="license_keys.json";var Q=class{constructor(s,e,i,t){this.MAX_RETRIES=5;this.INITIAL_BACKOFF_DELAY_MS=1e3;this.TIMEOUT_MS=3e4;this.app=s,this.plugin=e,this.log=i||this.defaultLogHandler.bind(this),this.cancelCheck=t}async defaultLogHandler(s,e=!1){this.plugin.settings.logEnabled&&(console.log(`Denali AI (FileRenamer Log): ${s}`),e&&new r.Notice(s,5e3),this.plugin.settings.logFileEnabled&&await this.writeLogToFile(s))}async writeLogToFile(s){let e=F.LOGS_SUBFOLDER,i=`${e}/denali-ai-log.md`;try{await this.app.vault.createFolder(e).catch(()=>{}),this.app.vault.getAbstractFileByPath(i)||await this.app.vault.create(i,`# Denali AI Logs

`);let l=`[${new Date().toLocaleString()}] ${s}
`;await this.app.vault.adapter.append(i,l)}catch(t){console.error("Failed to write to log file:",t),new r.Notice(`Failed to write to Denali AI log file: ${t.message}`,5e3)}}async makeOpenRouterRequestWithRetries(s,e){var a;let i=this.plugin.settings.openRouterApiKey,t=await Y(i);if(!t)throw this.log("OpenRouter API Key is missing or could not be decrypted. Please configure it in plugin settings.",!0),new Error("OpenRouter API Key is not configured or invalid.");s.headers={...s.headers,Authorization:`Bearer ${t}`,"Content-Type":"application/json"};for(let l=0;l<this.MAX_RETRIES;l++){let n=this.INITIAL_BACKOFF_DELAY_MS*Math.pow(2,l);l>0&&(console.log(`Denali AI: Retrying OpenRouter request for ${e} (attempt ${l+1}/${this.MAX_RETRIES}) after ${n/1e3}s delay...`),await new Promise(p=>setTimeout(p,n)));try{let p=new Promise((o,d)=>setTimeout(()=>d(new Error("Request timed out")),this.TIMEOUT_MS)),u=await Promise.race([(0,W.requestUrl)(s),p]);if(u.status===200&&u.json&&u.json.error){let o=u.json.error.message||"Unknown AI error";throw this.log(`OpenRouter AI returned an error for ${e}: ${o}`,!0),new Error(`AI Error: ${o}`)}return u}catch(p){let u=p.message||"Unknown network error",o=p.status;if(o===401)throw this.log(`OpenRouter API Key is invalid or unauthorized for ${e}. Please check your settings.`,!0),new Error("Invalid OpenRouter API Key. Please check your plugin settings.");if(o===429){let d=(a=p.headers)==null?void 0:a["Retry-After"];d?(n=parseInt(d,10)*1e3,this.log(`Rate limit hit for ${e}. Retrying after ${n/1e3}s as per server instruction.`,!0)):this.log(`Rate limit hit for ${e}. Retrying with exponential backoff.`,!0)}else if(o>=500)this.log(`OpenRouter server error (${o}) for ${e}: ${u}. Retrying with exponential backoff.`,!0);else{if(o>=400&&o<500)throw this.log(`Client error (${o}) for ${e}: ${u}. Not retrying.`,!0),new Error(`OpenRouter API Error: ${u} (Status: ${o})`);u==="Request timed out"?this.log(`OpenRouter request for ${e} timed out after ${this.TIMEOUT_MS/1e3}s. Retrying...`,!0):this.log(`Network error for ${e}: ${u}. Retrying...`,!0)}if(l===this.MAX_RETRIES-1)throw this.log(`OpenRouter request for ${e} failed after ${this.MAX_RETRIES} attempts. Last error: ${u}`,!0),new Error(`Failed to communicate with OpenRouter API for ${e} after multiple retries. Last error: ${u}`)}}throw new Error("Unexpected error: makeOpenRouterRequestWithRetries completed without returning or throwing.")}calculateCreditCost(s,e,i){let t=0;return e&&(t+=1),i&&(s.addTitle&&(t+=1),s.addCreatedDate&&(t+=1),s.addModifiedDate&&(t+=1),s.addAuthor&&(t+=1),s.addStatus&&(t+=1),s.addProject&&(t+=1),s.addTopic&&(t+=1),s.addAlias&&(t+=1)),t}async deductCredits(s){return this.plugin.settings.paymentType==="one-time"?this.plugin.settings.availableCredits>=s?(this.plugin.settings.availableCredits-=s,await this.plugin.saveSettings(),this.log(`Deducted ${s} credits. Remaining credits: **${this.plugin.settings.availableCredits}**`),new r.Notice(`Used ${s} credits. Remaining: ${this.plugin.settings.availableCredits}`,2e3),!0):(this.log(`Not enough credits to perform this operation. Required: ${s}, Available: ${this.plugin.settings.availableCredits}`,!0),new r.Notice(`Not enough credits! Required: ${s}, Available: ${this.plugin.settings.availableCredits}. Please apply a Pro or Ultimate license.`,7e3),!1):!0}async processRename(s,e,i){var D;this.log(`--- Starting rename process for **${s.name}** ---`);let t=s.name,{backupEnabled:a,useFrontmatter:l,maxInputLength:n,aiNameStyle:p,maxOutputLength:u,fileNameCase:o,addAlias:d,stopWords:g,characterReplacement:h,autoSubfolder:m,renameTimestampFormat:c,addTitle:x,addAuthor:b,addProject:S,addTopic:$,paymentType:T}=this.plugin.settings,N=!0,K=l&&(x||b||S||$||d||this.plugin.settings.addCreatedDate||this.plugin.settings.addModifiedDate||this.plugin.settings.addStatus),L=this.calculateCreditCost(this.plugin.settings,N,K);if(T==="one-time"&&!await this.deductCredits(L)){this.log("Operation aborted due to insufficient credits.",!0);return}try{a&&await this.createBackup(s);let A=null,w=null,P=null,M=null,O=null,B=[],v=null;this.log("Reading file content for AI analysis...");let _=await this.app.vault.read(s),I=_;if(l){let y=(D=this.app.metadataCache.getFileCache(s))==null?void 0:D.frontmatter;y&&(I=`---
${Object.keys(y).map(j=>`${j}: ${y[j]}`).join(`
`)}
---
${_}`)}if(I.length>n&&(this.log(`Truncating file content from **${I.length}** to **${n}** characters (plan limit).`),I=I.substring(0,n)),this.log("Preparing AI request..."),e&&i)A=e,w=i.title,P=i.author,M=i.project,O=i.topic,B=i.tags,v=i.folder,this.log(`Using user-suggested name: **${A}** and pre-generated AI frontmatter suggestions.`);else{let y=await this.getCombinedAiSuggestions(I);A=y.filename,w=y.title,P=y.author,M=y.project,O=y.topic,B=y.tags,v=y.folder,e&&(A=e,this.log(`Overriding AI-generated filename with user-suggested name: **${A}**`))}if(A){let y=s.parent?s.parent.path:"";if(m&&v&&(y=v,await this.app.vault.createFolder(y).catch(()=>{}),this.log(`Moving file to suggested subfolder: **${y}**`)),await this.updateFrontmatter(s,t,I,A,B,y,w,P,M,O),o!=="original"){this.log("Applying stop words and character replacement to AI-generated name.");let ne=g.split(",").map(X=>X.trim().toLowerCase());A=A.split(/\s+/).filter(X=>!ne.includes(X.toLowerCase())).join(" "),h&&(A=A.replace(/\s/g,h))}let j=y?y+"/":"",k=this.applyCaseStyle(A),se=s.stat.mtime,U=new Date(se),te=`${U.getFullYear()}-${(U.getMonth()+1).toString().padStart(2,"0")}-${U.getDate().toString().padStart(2,"0")} ${U.getHours().toString().padStart(2,"0")}-${U.getMinutes().toString().padStart(2,"0")}-${U.getSeconds().toString().padStart(2,"0")}`;c==="prefix"?(k=`${te} ${k}`,this.log("Adding timestamp prefix to filename.")):c==="suffix"&&(k=`${k} ${te}`,this.log("Adding timestamp suffix to filename."));let J=j+k+".md",G=1;for(;this.app.vault.getAbstractFileByPath(J);)this.log(`File with name "**${k}.md**" already exists. Renaming to "**${k}-${G}.md**"`,!0),k=`${k}-${G}`,J=j+k+".md",G++;await this.app.vault.rename(s,J),this.log(`File renamed from "**${t}**" to "**${k}.md**"`,!1),new r.Notice(`File renamed from "${t}" to "${k}.md"`)}else this.log(`Error: Denali AI could not suggest a new name for **${t}**`,!0)}catch(A){this.log(`Error: Failed to rename file **${t}**. Details: ${A.message}`,!0),console.error("Denali AI Rename Error:",A)}this.log(`--- Rename process for **${t}** completed ---`)}applyCaseStyle(s){switch(this.plugin.settings.fileNameCase){case"kebab":return s.toLowerCase().replace(/\s/g,"-").replace(/--+/g,"-");case"camel":return s.replace(/(?:^\w|[A-Z]|\b\w)/g,(e,i)=>i===0?e.toLowerCase():e.toUpperCase()).replace(/\s+/g,"");case"lowercase":return s.toLowerCase().replace(/\s/g,"");case"original":default:return s}}async createBackup(s){this.log("Creating backup of original file...");let e=F.BACKUP_SUBFOLDER;await this.app.vault.createFolder(e).catch(()=>{this.log("Backup folder already exists or could not be created.",!1)});let i=new Date().getTime(),t=new Date(i),a=`${t.getFullYear()}-${(t.getMonth()+1).toString().padStart(2,"0")}-${t.getDate().toString().padStart(2,"0")}`,l=`${t.getHours().toString().padStart(2,"0")}-${t.getMinutes().toString().padStart(2,"0")}-${t.getSeconds().toString().padStart(2,"0")}`,n=s.basename,p=this.plugin.settings.timestampFormat==="suffix"?`-${a}-${l}`:"",u=`${n}${p}.${s.extension}`,o=`${e}/${u}`;await this.app.vault.copy(s,o),this.log(`Backed up file to **${o}**`)}getMarkdownFiles(s){let e=[],i=this.plugin.settings.untitledKeywords.split(",").map(t=>t.trim().toLowerCase());for(let t of s.children)t instanceof r.TFile&&t.extension==="md"?(this.plugin.settings.lookForUntitled&&i.some(l=>t.name.toLowerCase().startsWith(l))||!this.plugin.settings.lookForUntitled)&&e.push(t):t instanceof r.TFolder&&(e=e.concat(this.getMarkdownFiles(t)));return e}async getCombinedAiSuggestions(s){let{aiModel:e,maxInputLength:i,maxOutputLength:t,aiNameStyle:a,addTitle:l,titlePrompt:n,addAuthor:p,authorPrompt:u,addProject:o,projectPrompt:d,addTopic:g,topicPrompt:h,autoSubfolder:m,useFrontmatter:c}=this.plugin.settings,x=s.length>i?s.substring(0,i):s,b=["You are an AI assistant that generates file names and frontmatter properties based on text content. Respond ONLY with a JSON object. If a property is not requested (e.g., if 'addTitle' is false), do not include it in the JSON. Ensure all string values are properly escaped for JSON. Do not include any other text outside the JSON object."],S=this.plugin.settings.customPrompt;(S===V.balanced||S===V.keywordFilled||S===V.nicheWordsOnly)&&(S=V[a]),S=S.replace("{max_output_length}",t.toString()).replace("{max_input_length}",i.toString()),b.push(`- Generate a filename based on the following instruction: "${S}". Store this in the 'filename' key.`),p&&b.push(`- Generate an author name based on the following instruction: "${u}". Store this in the 'author' key.`),o&&b.push(`- Generate a project name based on the following instruction: "${d}". Store this in the 'project' key.`),g&&b.push(`- Generate a single, broad topic or category based on the following instruction: "${h}". Store this in the 'topic' key.`);let $=c||g,T=m;$&&b.push(`- Extract up to 5 relevant keywords/tags. Store these in a 'tags' array (e.g., ["tag1", "tag2"]).`),T&&b.push(`- Suggest a single subfolder path. Store this in a 'folder' key (e.g., "Ideas/AI-Notes").`),b.push(`
Example JSON response (only include requested fields):`),b.push("```json"),b.push(`{
            "filename": "Example File Name",
            "title": "Example Title",
            "author": "Example Author",
            "project": "Example Project",
            "topic": "Example Topic",
            "tags": ["tag1", "tag2"],
            "folder": "Example/Folder"
        }`),b.push("```");let N=b.join(`
`),K={model:e,messages:[{role:"system",content:N},{role:"user",content:x}],temperature:.01,response_format:{type:"json_object"}};try{this.log("Requesting AI suggestions...");let D=(await this.makeOpenRouterRequestWithRetries({url:"https://openrouter.ai/api/v1/chat/completions",method:"POST",body:JSON.stringify(K)},"combined filename and frontmatter suggestions")).json;if(!D||!D.choices||D.choices.length===0)throw this.log("AI Combined Suggestions API Call: Invalid response received.",!0),new Error("Invalid API response format.");let A=D.choices[0].message.content.trim();console.log(`Denali AI: Raw AI response received: "${A.substring(0,Math.min(A.length,200))}..."`);let w;try{w=JSON.parse(A)}catch(y){return this.log(`AI Combined Suggestions API Call: Failed to parse JSON from AI response. Raw response: "${A}"`,!0),console.error("JSON Parse Error:",y),{filename:null,title:null,author:null,project:null,topic:null,tags:[],folder:null}}let P=typeof w.filename=="string"?w.filename.trim():null,M=typeof w.title=="string"?w.title.trim():null,O=typeof w.author=="string"?w.author.trim():null,B=typeof w.project=="string"?w.project.trim():null,v=typeof w.topic=="string"?w.topic.trim():null,_=Array.isArray(w.tags)?w.tags.map(y=>this.sanitizeTag(y)):[],I=typeof w.folder=="string"?w.folder.trim():null;return P&&(P.length>t&&(P=P.substring(0,t),this.log(`AI Combined Suggestions API Call: Truncated AI's filename response to **${t}** characters (plan limit).`)),P=P.replace(/[\\/:*?"<>|]/g," ").replace(/\s+/g,"-").replace(/^-+|-+$/g,"")),this.log(`AI suggested filename: **${P}**`),p&&this.log(`AI suggested author: **${O}**`),o&&this.log(`AI suggested project: **${B}**`),g&&this.log(`AI suggested topic: **${v}**`),$&&this.log(`AI suggested tags: **${_.join(", ")}**`),T&&this.log(`AI suggested folder: **${I}**`),{filename:P,title:M,author:O,project:B,topic:v,tags:_,folder:I}}catch(L){return this.log(`OpenRouter API request for combined suggestions failed: ${L.message}`,!0),console.error("OpenRouter API request failed:",L),{filename:null,title:null,author:null,project:null,topic:null,tags:[],folder:null}}}sanitizeTag(s){let e=s.replace(/\s+/g,"-");return e=e.replace(/[^\w-]/g,"-"),e=e.replace(/^[_-]+|[_-]+$/g,""),e=e.replace(/[-_]+/g,"-"),e}async updateFrontmatter(s,e,i,t,a,l,n,p,u,o){this.log("Starting frontmatter update..."),await this.app.fileManager.processFrontMatter(s,async d=>{let{addAlias:g,addTitle:h,addCreatedDate:m,createdDateFormat:c,addModifiedDate:x,modifiedDateFormat:b,addAuthor:S,addStatus:$,statusDefaultValue:T,addProject:N,addTopic:K}=this.plugin.settings;if(g&&(d.aliases||(d.aliases=[]),typeof d.aliases=="string"&&(d.aliases=[d.aliases]),Array.isArray(d.aliases)||(d.aliases=[]),d.aliases.includes(e)?this.log(`Old filename '${e}' is already an alias. Skipping.`):(d.aliases.push(e),this.log(`Added old filename '${e}' as an alias.`))),a&&a.length>0?(d.tags?typeof d.tags=="string"?d.tags=[d.tags]:Array.isArray(d.tags)||(this.log("Warning: 'tags' property in frontmatter was not an array or string. Resetting to empty array.",!0),d.tags=[]):d.tags=[],a.forEach(L=>{d.tags.includes(L)||d.tags.push(L)}),this.log(`Added AI-generated tags: **${a.join(", ")}**`)):this.log("No AI-generated tags to add."),h){let L=t.replace(/[-_]/g," ").replace(/\b\w/g,D=>D.toUpperCase());d.title=L,this.log(`Set 'title' property to derived from filename: **${L}**`)}else this.log("'Add Title' is disabled. Skipping.");if(m)if(d.created)this.log("'created' property already exists. Skipping.");else{let L=s.stat.ctime;d.created=ie(new Date(L),c),this.log(`Set 'created' property to: **${d.created}**`)}else this.log("'Add Created Date' is disabled. Skipping.");if(x){let L=s.stat.mtime;d.modified=ie(new Date(L),b),this.log(`Set 'modified' property to: **${d.modified}**`)}else this.log("'Add Modified Date' is disabled. Skipping.");S?p?(d.author=p,this.log(`Set 'author' property to: **${p}**`)):this.log("'author' suggestion failed."):this.log("'Add Author' is disabled. Skipping."),$?d.status?this.log("'status' property already exists. Skipping."):(d.status=T,this.log(`Set 'status' property to default value: **${T}**`)):this.log("'Add Status' is disabled. Skipping."),N?u?(d.project=u,this.log(`Set 'project' property to: **${u}**`)):this.log("'project' suggestion failed."):this.log("'Add Project' is disabled. Skipping."),K?o?(d.topic=o,this.log(`Set 'topic' property to: **${o}**`)):this.log("'topic' suggestion failed."):this.log("'Add Topic' is disabled. Skipping.")}),this.log("Frontmatter update completed.")}},C=class extends r.Modal{constructor(e,i,t){super(e);this.filesToProcess=[];this.processedCount=0;this.isCancelled=!1;this.suggestedName="";this.initialRenameDone=!1;this.initialAiSuggestions=null;this.plugin=i,this.fileRenamer=new Q(this.app,this.plugin,this.logStatus.bind(this),()=>this.isCancelled),this.file=t}onOpen(){let{contentEl:e,modalEl:i}=this;if(e.empty(),this.contentEl.createEl("h2",{text:"Denali AI File Renamer"}),this.statusContainer=this.contentEl.createEl("div",{cls:"denali-status-container"}),!this.file){this.logStatus("No file or folder selected. Please select a file or folder to rename.",!0),setTimeout(()=>this.close(),this.plugin.settings.modalCloseDelay*1e3);return}let t=this.plugin.settings.openRouterApiKey,a=t?`Encrypted (ends with ...${t.substring(t.length-4)})`:"Not Set";if(this.logStatus(`Using API Key: **${a}**`),this.logStatus(`Current Plan: **${this.plugin.settings.userPlan.toUpperCase()}**`),this.plugin.settings.paymentType==="one-time"?(this.logStatus(`Available Credits: **${this.plugin.settings.availableCredits}**`),this.logStatus(`Max Input Length: **${this.plugin.settings.maxInputLength}** chars`),this.logStatus(`Max Output Length: **${this.plugin.settings.maxOutputLength}** chars`)):(this.logStatus(`Max Input Length: **${this.plugin.settings.maxInputLength}** chars`),this.logStatus(`Max Output Length: **${this.plugin.settings.maxOutputLength}** chars`),this.logStatus(`Batch Rename Limit: **${this.plugin.settings.batchRenameLimit}** files`),this.logStatus(`Daily File Limit: **${this.plugin.settings.dailyFileLimit}** files`),this.logStatus(`Monthly File Limit: **${this.plugin.settings.maxFilesPerMonth}** files`)),this.plugin.settings.renameChoice==="interactive")if(this.file instanceof r.TFile){let n=this.plugin.settings.untitledKeywords.split(",").map(p=>p.trim().toLowerCase()).some(p=>this.file.name.toLowerCase().startsWith(p));if(this.plugin.settings.lookForUntitled&&!n){this.logStatus(`File "${this.file.name}" is not an "untitled" file, so it will not be renamed.`,!0),setTimeout(()=>this.close(),this.plugin.settings.modalCloseDelay*1e3);return}this.logStatus(`Starting interactive rename process for file: **${this.file.name}**`),this.showInteractiveModal(this.file)}else this.file instanceof r.TFolder?(this.logStatus(`Starting interactive batch rename for folder: **${this.file.path}**`),this.processBatchRename(this.file)):this.logStatus("No file or folder selected. Please select a file or folder to rename.");else if(this.file instanceof r.TFile){let n=this.plugin.settings.untitledKeywords.split(",").map(p=>p.trim().toLowerCase()).some(p=>this.file.name.toLowerCase().startsWith(p));if(this.plugin.settings.lookForUntitled&&!n){this.logStatus(`File "${this.file.name}" is not an "untitled" file, so it will not be renamed.`,!0),setTimeout(()=>this.close(),this.plugin.settings.modalCloseDelay*1e3);return}this.logStatus(`Starting automatic rename process for file: **${this.file.name}**`),this.processAutomaticRename(this.file)}else this.file instanceof r.TFolder&&(this.logStatus(`Starting automatic batch rename for folder: **${this.file.path}**`),this.processBatchRename(this.file));(this.file instanceof r.TFolder||this.plugin.settings.renameChoice==="automatic")&&(this.file instanceof r.TFolder&&(this.progressBar=this.contentEl.createEl("div",{cls:"denali-progress-bar-container"}),this.progressBar.createEl("div",{cls:"denali-progress-bar"})),this.cancelButton=i.createEl("button",{text:"Cancel",cls:"mod-warning"}),this.cancelButton.onclick=()=>{this.isCancelled=!0,this.logStatus("Rename cancelled by user.")})}async showInteractiveModal(e){this.logStatus("Generating name and frontmatter suggestions...");try{let i=await this.app.vault.read(e),t=await this.fileRenamer.getCombinedAiSuggestions(i);this.suggestedName=t.filename||e.basename,this.initialAiSuggestions=t,this.editContainer=this.contentEl.createEl("div",{cls:"denali-edit-container"}),this.editContainer.createEl("label",{text:"Suggested Filename:",cls:"denali-label"}),this.nameInput=this.editContainer.createEl("input",{type:"text",cls:"denali-input"}),this.nameInput.value=this.suggestedName;let a=this.editContainer.createEl("div",{cls:"denali-button-container"}),l=a.createEl("button",{text:"Rename",cls:"mod-cta"}),n=a.createEl("button",{text:"Cancel",cls:"mod-warning"});l.onclick=async()=>{this.initialRenameDone||(this.initialRenameDone=!0,this.editContainer.style.display="none",this.logStatus(`User accepted new name: **${this.nameInput.value}**`),this.logStatus("Starting rename..."),await this.fileRenamer.processRename(e,this.nameInput.value,this.initialAiSuggestions),this.close())},n.onclick=()=>{this.logStatus("User cancelled rename process."),this.close()}}catch(i){this.logStatus(`Failed to generate name suggestion: ${i.message}`,!0),setTimeout(()=>this.close(),this.plugin.settings.modalCloseDelay*1e3)}}async processAutomaticRename(e){await this.fileRenamer.processRename(e),this.logStatus("Automatic rename process completed.",!1),setTimeout(()=>this.close(),this.plugin.settings.modalCloseDelay*1e3)}logStatus(e,i=!1){if(!this.plugin.settings.logEnabled)return;let t=new Date().toLocaleTimeString(),a=this.statusContainer.createEl("div",{cls:"denali-log-line"});a.createSpan({text:`[${t}] `,cls:"denali-log-timestamp"});let l=a.createSpan({cls:i?"denali-log-error":"denali-log-message"});l.innerHTML=e,this.statusContainer.scrollTop=this.statusContainer.scrollHeight,console.log(`Denali AI (Modal Log): ${e}`)}async processBatchRename(e){if(this.filesToProcess=this.fileRenamer.getMarkdownFiles(e),this.processedCount=0,this.plugin.settings.paymentType==="subscription"){let i=this.plugin.settings.batchRenameLimit;this.filesToProcess.length>i&&(this.logStatus(`Batch rename limited to ${i} files for your current plan (${this.plugin.settings.userPlan.toUpperCase()}). Found ${this.filesToProcess.length} files. Processing first ${i}.`,!0),this.filesToProcess=this.filesToProcess.slice(0,i))}if(this.filesToProcess.length===0){this.logStatus("No markdown files found in the selected folder.",!0),this.progressBar&&(this.progressBar.style.display="none"),setTimeout(()=>this.close(),this.plugin.settings.modalCloseDelay*1e3);return}this.logStatus(`Starting batch rename for ${this.filesToProcess.length} files...`);for(let i of this.filesToProcess){if(this.isCancelled){this.logStatus("Batch rename cancelled by user.");break}let t=!0,a=this.plugin.settings.useFrontmatter&&(this.plugin.settings.addTitle||this.plugin.settings.addAuthor||this.plugin.settings.addProject||this.plugin.settings.addTopic||this.plugin.settings.addAlias||this.plugin.settings.addCreatedDate||this.plugin.settings.addModifiedDate||this.plugin.settings.addStatus),l=this.fileRenamer.calculateCreditCost(this.plugin.settings,t,a);if(this.plugin.settings.paymentType==="one-time"&&!await this.fileRenamer.deductCredits(l)){this.logStatus(`Batch operation aborted due to insufficient credits for file: **${i.name}**.`,!0);break}await this.fileRenamer.processRename(i),this.processedCount++,this.updateProgressBar()}this.logStatus("Batch rename process completed.",!1),this.progressBar&&(this.progressBar.style.display="none"),this.cancelButton&&this.cancelButton.remove(),setTimeout(()=>this.close(),this.plugin.settings.modalCloseDelay*1e3)}updateProgressBar(){let e=this.filesToProcess.length>0?this.processedCount/this.filesToProcess.length*100:0;if(this.progressBar){let i=this.progressBar.querySelector(".denali-progress-bar");i.style.width=`${e}%`,this.progressBar.title=`${this.processedCount} of ${this.filesToProcess.length} files processed.`}}onClose(){let{contentEl:e}=this;e.empty()}},ee=class extends r.PluginSettingTab{constructor(e,i){super(e,i)}display(){let{containerEl:e}=this;e.empty();let i=(a,l,n,p,u)=>{let o;switch(n){case"renameChoice":o="displayRenameProcessChoice";break;case"timestampFormat":o="displayBackupTimestampFormat";break;case"lookForUntitled":o="displayLookForUntitled";break;case"customPrompt":o="displayCustomPrompt";break;case"maxInputLength":o="displayMaxInputLength";break;case"maxOutputLength":o="displayMaxOutputLength";break;case"renameTimestampFormat":o="displayRenameTimestampFormat";break;case"useFrontmatter":o="displayUseFrontmatter";break;case"backupEnabled":o="displayBackupEnabled";break;case"logEnabled":o="displayLogEnabled";break;case"logFileEnabled":o="displayLogFileEnabled";break;case"modalCloseDelay":o="displayModalCloseDelay";break;case"resetSettings":o="displayResetSettings";break;case"openRouterApiKey":o="displayOpenRouterApiKey";break;case"aiModel":o="displayAiModel";break;case"aiNameStyle":o="displayAiNameStyle";break;case"fileNameCase":o="displayFileNameCase";break;case"stopWords":o="displayStopWords";break;case"characterReplacement":o="displayCharacterReplacement";break;case"addAlias":o="displayAddAlias";break;case"renameOnCreation":o="displayRenameOnCreation";break;case"untitledKeywords":o="displayUntitledKeywords";break;case"autoSubfolder":o="displayAutoSubfolder";break;case"backupFolder":o="displayBackupFolder";break;case"displayDeleteDenaliFolderButton":o="displayDeleteDenaliFolderButton";break;case"userPlan":o="displayUserPlan";break;case"maxFilesPerMonth":o="displayMaxFilesPerMonth";break;case"dailyFileLimit":o="displayDailyFileLimit";break;case"batchRenameLimit":o="displayBatchRenameLimit";break;case"userLicenseKey":o="displayUserLicenseKey";break;case"paymentType":o="displayPaymentType";break;case"availableCredits":o="displayAvailableCredits";break;default:o=`display${n.charAt(0).toUpperCase()+n.slice(1)}`;break}if(!this.plugin.settings[o])return;if(n==="resetSettings"){new r.Setting(e).setName(a).setDesc(l).addButton(g=>g.setButtonText((u==null?void 0:u.buttonText)||"").setWarning().onClick(async()=>{new z(this.app,"Confirm Reset","Are you sure you want to reset all Denali AI settings to their default values? This action cannot be undone.",async()=>{this.plugin.settings=Object.assign({},q),await this.plugin.saveSettings(),this.display(),new r.Notice("Settings have been reset to default.",3e3)}).open()}));return}let d=new r.Setting(e).setName(a).setDesc(l);switch(p){case"toggle":d.addToggle(g=>g.setValue(this.plugin.settings[n]).onChange(async h=>{this.plugin.settings[n]=h,await this.plugin.saveSettings(),this.display()}));break;case"text":d.addText(g=>{let h=["maxFilesPerMonth","dailyFileLimit","batchRenameLimit","availableCredits"].includes(n);h&&g.setDisabled(!0),g.setPlaceholder((u==null?void 0:u.placeholder)||"").setValue(String(this.plugin.settings[n])).onChange(async m=>{if(!h){if(n==="maxInputLength"||n==="maxOutputLength"){let c=parseInt(m,10),x=E(this.plugin.settings.userPlan),b,S;if(n==="maxInputLength"?(b=x.maxInputLength,S="Max AI Input Length"):(b=x.maxOutputLength,S="Max AI Output Length"),!isNaN(c)&&c>0&&c<=b)this.plugin.settings[n]=c;else{new r.Notice(`Invalid value for '${S}'. Must be a positive number up to ${b}. Reverting.`,4e3),g.setValue(String(this.plugin.settings[n]));return}}else if(n==="modalCloseDelay"||n==="availableCredits"){let c=parseInt(m,10);isNaN(c)?(new r.Notice(`Invalid number for '${a}'. Reverting to previous value.`,2e3),g.setValue(String(this.plugin.settings[n]))):this.plugin.settings[n]=c}else this.plugin.settings[n]=m;await this.plugin.saveSettings()}})});break;case"textarea":d.addTextArea(g=>g.setPlaceholder((u==null?void 0:u.placeholder)||"").setValue(this.plugin.settings[n]).onChange(async h=>{this.plugin.settings[n]=h,await this.plugin.saveSettings()}));break;case"dropdown":d.addDropdown(g=>{if(u)for(let h in u)g.addOption(h,u[h]);g.setValue(this.plugin.settings[n]).onChange(async h=>{if(this.plugin.settings[n]=h,n==="userPlan"){let c=E(h);this.plugin.settings.maxInputLength>c.maxInputLength&&(this.plugin.settings.maxInputLength=c.maxInputLength),this.plugin.settings.maxOutputLength>c.maxOutputLength&&(this.plugin.settings.maxOutputLength=c.maxOutputLength),this.plugin.settings.paymentType==="subscription"&&(this.plugin.settings.maxFilesPerMonth=c.maxFilesPerMonth,this.plugin.settings.dailyFileLimit=c.dailyFileLimit,this.plugin.settings.batchRenameLimit=c.batchRenameLimit)}else if(n==="paymentType"){let m=h,c=E(this.plugin.settings.userPlan);this.plugin.settings.maxInputLength>c.maxInputLength&&(this.plugin.settings.maxInputLength=c.maxInputLength),this.plugin.settings.maxOutputLength>c.maxOutputLength&&(this.plugin.settings.maxOutputLength=c.maxOutputLength),m==="subscription"?(this.plugin.settings.maxFilesPerMonth=c.maxFilesPerMonth,this.plugin.settings.dailyFileLimit=c.dailyFileLimit,this.plugin.settings.batchRenameLimit=c.batchRenameLimit):(this.plugin.settings.maxFilesPerMonth=0,this.plugin.settings.dailyFileLimit=0,this.plugin.settings.batchRenameLimit=0)}await this.plugin.saveSettings(),this.display()})});break}},t=(a,l)=>{this.plugin.settings[l]&&e.createEl("h3",{text:a})};if(e.createEl("h2",{text:"Denali AI File Renamer Settings"}),e.createEl("p",{text:"Configure the behavior of the Denali AI File Renamer plugin."}),t("Payment & Plan Settings","displayPaymentType"),i("Payment Type","Choose type of purchase.","paymentType","dropdown",{"one-time":"One-Time Credits"}),this.plugin.settings.displayUserLicenseKey&&new r.Setting(e).setName("Your License Key").setDesc("Enter your license key purchased from Gumroad.").addText(a=>a.setPlaceholder("Enter your license key here").setValue(this.plugin.settings.userLicenseKey).onChange(async l=>{this.plugin.settings.userLicenseKey=l,await this.plugin.saveSettings()})),this.plugin.settings.displayApplyLicenseButton&&new r.Setting(e).setName("Apply License Key").setDesc("Click to validate your entered license key and update your plan/credits.").addButton(a=>a.setButtonText("Apply License Key").setCta().onClick(async()=>{new r.Notice("Validating license key...",2e3),await this.plugin.validateLicenseKey(this.plugin.settings.userLicenseKey)==="free"&&new r.Notice("Invalid or expired license key. Please check your key or purchase one.",7e3);let n=E(this.plugin.settings.userPlan);this.plugin.settings.maxInputLength>n.maxInputLength&&(this.plugin.settings.maxInputLength=n.maxInputLength),this.plugin.settings.maxOutputLength>n.maxOutputLength&&(this.plugin.settings.maxOutputLength=n.maxOutputLength),this.plugin.settings.paymentType==="subscription"?(this.plugin.settings.maxFilesPerMonth=n.maxFilesPerMonth,this.plugin.settings.dailyFileLimit=n.dailyFileLimit,this.plugin.settings.batchRenameLimit=n.batchRenameLimit):(this.plugin.settings.maxFilesPerMonth=0,this.plugin.settings.dailyFileLimit=0,this.plugin.settings.batchRenameLimit=0),await this.plugin.saveSettings(),this.display()})),this.plugin.settings.paymentType==="subscription")i("User Plan","The current subscription plan. This is set by applying a license key.","userPlan","dropdown",{free:"Free",pro:"Pro",ultimate:"Ultimate"}),i("Max Files Per Month","Maximum number of files a user can process per month based on their plan.","maxFilesPerMonth","text"),i("Daily File Limit","Maximum number of files a user can process per day based on their plan.","dailyFileLimit","text"),i("Batch Rename Limit","Maximum number of files that can be processed in a single batch rename operation.","batchRenameLimit","text");else{i("Available Credits","Your current balance of Denali AI credits. Each file rename costs 1 credit, and each frontmatter change costs 1 credit.","availableCredits","text");let a=new r.Setting(e).setName("Purchase One-Time Credits");a.descEl.innerHTML='Need more credits? Buy them here:<br><ul><li><a href="https://plu.ug/l/42zqgikhe" target="_blank">25 Credits (USD 0.99) - (Paypal, VISA, MC, AMEX, Stripe)</a></li><li><a href="https://plu.ug/l/pd2q4c8hr" target="_blank">500 Credits (USD 9.99) - (Paypal, VISA, MC, AMEX, Stripe)</a></li><li><a href="https://plu.ug/l/nzlodu-hy" target="_blank">25 Credits (INR 079) - (Razorpay, UPI)</a></li><li><a href="https://plu.ug/l/8mg8kujhl" target="_blank">500 Credits (INR 799) - (Razorpay, UPI)</a></li></ul>',e.createEl("h3",{text:"Compare Denali AI Plans"}),e.createEl("p",{text:"Upgrade to a paid plan for more features and higher limits!"});let l=e.createEl("div",{attr:{style:"margin-top: 20px; border: 1px solid var(--background-modifier-border); border-radius: 4px; overflow: hidden; font-size: 0.85em;"}}),n=l.createEl("div",{attr:{style:"display: flex; font-weight: bold; background-color: var(--background-secondary); padding: 10px; border-bottom: 1px solid var(--background-modifier-border);"}});n.createEl("div",{text:"Feature",attr:{style:"flex: 2; padding-right: 10px;"}}),n.createEl("div",{text:"Free Plan",attr:{style:"flex: 1; text-align: center;"}}),n.createEl("div",{text:"Pro Plan (0.99 USD)",attr:{style:"flex: 1; text-align: center;"}}),n.createEl("div",{text:"Ultimate Plan (9.99 USD)",attr:{style:"flex: 1; text-align: center;"}});let p=[{feature:"Cost",free:"Free",pro:"0.99 USD",ultimate:"9.99 USD"},{feature:"Credits Included",free:"10 Free Credits",pro:"25 Credits",ultimate:"500 Credits"},{feature:"Max AI Input Length",free:"1,000 characters",pro:"3,000 characters",ultimate:"10,000 characters"},{feature:"Max AI Output Length",free:"50 characters ",pro:"500 characters",ultimate:"1,000 characters"}];p.forEach((u,o)=>{let d=l.createEl("div",{attr:{style:`display: flex; padding: 10px; ${o%2===0?"background-color: var(--background-primary);":"background-color: var(--background-secondary-alt);"} ${o<p.length-1?"border-bottom: 1px solid var(--background-modifier-border);":""}`}}),g=d.createEl("div",{attr:{style:"flex: 2; padding-right: 10px;"}});g.innerHTML=`<strong>${u.feature}</strong>`,d.createEl("div",{text:u.free,attr:{style:"flex: 1; text-align: center;"}});let h=d.createEl("div",{attr:{style:"flex: 1; text-align: center;"}});h.innerHTML=`<strong>${u.pro}</strong>`;let m=d.createEl("div",{attr:{style:"flex: 1; text-align: center;"}});m.innerHTML=`<strong>${u.ultimate}</strong>`})}t("Main Workflow Settings","displayMainWorkflowHeader"),i("Rename Process Choice","Choose between automatic renaming without user interaction or an interactive modal that allows the user to approve/edit the name.","renameChoice","dropdown",{automatic:"Automatic",interactive:"Interactive"}),i("Rename on Creation","Automatically trigger renaming when a new file is created.","renameOnCreation","toggle"),i("Only Rename Untitled Files","If enabled, renaming on creation and batch renaming will only apply to files with names matching the keywords below.","lookForUntitled","toggle"),i("Untitled Keywords","A comma-separated list of keywords (case-insensitive) that identify untitled files.","untitledKeywords","text"),i("Auto Subfolder","Automatically move the file to a subfolder suggested by the AI based on its content.","autoSubfolder","toggle"),t("AI & API Settings","displayAiApiHeader"),i("OpenRouter API Key","Enter your OpenRouter API key. This is required for the AI functionality. You should paste an ENCRYPTED key here, generated by the provided Python script.","openRouterApiKey","text"),i("AI Model","Choose the AI model from OpenRouter to use for renaming.","aiModel","dropdown",be.reduce((a,l)=>({...a,[l]:l}),{})),i("AI Name Style","Choose the type of filename the AI should generate based on different priorities.","aiNameStyle","dropdown",{balanced:"Balanced (e.g., Apple Inc Annual Report for 2025)",keywordFilled:"Keyword-Filled (e.g., Code Python Tensorflow Johsnson AI Project memory second fix)",nicheWordsOnly:"Niche Words Only (e.g., apple report 2025 john reviewed approved emergency fix2)"}),i("Custom AI Prompt","Customize the prompt sent to the AI. Use `{content}` as a placeholder for the file content, `{max_input_length}` for the input character limit, and `{max_output_length}` for the output character limit.","customPrompt","textarea"),i("Max Input Length (characters)","The maximum number of characters from the file to send to the AI. This value can be customized, but cannot exceed your plan's limit.","maxInputLength","text"),i("Max Output Length (characters)","The maximum number of characters for the final file name. This value can be customized, but cannot exceed your plan's limit.","maxOutputLength","text"),t("File Naming & Structure","displayFileNamingHeader"),i("File Name Case","Choose the case style for the new file name.","fileNameCase","dropdown",{kebab:"kebab-case (my-file-name)",camel:"camelCase (myFileName)",lowercase:"lowercase (myfilename)",original:"Original (AI's suggestion)"}),i("Add Timestamp to New File","Add the file's modification date (YYYY-MM-DD HH-MM-SS) as a prefix or suffix to the new filename.","renameTimestampFormat","dropdown",{none:"None",prefix:"Prefix",suffix:"Suffix"}),i("Stop Words","A comma-separated list of words to remove from the generated filename.","stopWords","text"),i("Character Replacement",'A single character to replace spaces in the generated filename (e.g., "_" or "-"). Leave blank to use hyphens by default.',"characterReplacement","text"),t("Frontmatter Automation","displayFrontmatterHeader"),i("Include Frontmatter","Include the note's frontmatter (YAML) in the content sent to the AI for better context.","useFrontmatter","toggle"),i("Add Alias","Adds the old file name to the new note's frontmatter as an alias, preserving links.","addAlias","toggle"),this.createFrontmatterSetting(e,"addTitle","title","Title"),this.createFrontmatterSetting(e,"addCreatedDate","created","Created Date"),this.createFrontmatterSetting(e,"addModifiedDate","modified","Modified Date"),this.createFrontmatterSetting(e,"addAuthor","author","Author"),this.createFrontmatterSetting(e,"addStatus","status","Status"),this.createFrontmatterSetting(e,"addProject","project","Project"),this.createFrontmatterSetting(e,"addTopic","topic","Topic"),t("Backup & Log Settings","displayBackupLogHeader"),i("Create Backups","Create a copy of the original file before renaming it.","backupEnabled","toggle"),i("Backup Folder","The path to the folder where backups will be stored. It will be created if it does not exist.","backupFolder","text"),i("Backup Timestamp Format","Choose where to place the timestamp on the backup file name.","timestampFormat","dropdown",{none:"None",suffix:"Suffix (filename-YYYY-MM-DD-HH-MM-SS)"}),i("Enable Logs","Turn on or off the logging messages in the console and rename modal.","logEnabled","toggle"),i("Save Logs to File","If enabled, a log file will be created in the backup folder to record all renaming actions.","logFileEnabled","toggle"),i("Log Window Close Delay (seconds)","The time to wait before the log window closes automatically after a successful rename or batch job completion. This applies to both automatic and interactive modes.","modalCloseDelay","text"),t("Reset Settings","displayResetHeader"),i("Reset to Defaults","Reset all settings to their default values.","resetSettings","button",{buttonText:"Reset"}),this.plugin.settings.displayDeleteDenaliFolderButton&&new r.Setting(e).setName("Delete Denali AI Folder").setDesc('Permanently delete the "Denali AI" folder, including all backups and logs. This action cannot be undone.').addButton(a=>a.setButtonText("Delete Folder").setWarning().onClick(async()=>{if(!this.app.vault.getAbstractFileByPath(F.DENALI_FOLDER)){new r.Notice(`The "${F.DENALI_FOLDER}" folder does not exist.`,3e3);return}new z(this.app,"Confirm Deletion",`Are you sure you want to permanently delete the "${F.DENALI_FOLDER}" folder and all its contents (backups, logs)? This action cannot be undone.`,async()=>{try{await this.plugin.deleteDenaliFolder(),new r.Notice(`Successfully deleted the "${F.DENALI_FOLDER}" folder.`,5e3)}catch(n){new r.Notice(`Failed to delete the "${F.DENALI_FOLDER}" folder: ${n.message}`,5e3),console.error("Denali Folder Deletion Error:",n)}this.display()}).open()}))}createFrontmatterSetting(e,i,t,a){let l=`displayAdd${t.charAt(0).toUpperCase()+t.slice(1)}`,n=`display${t.charAt(0).toUpperCase()+t.slice(1)}Prompt`,p=`display${t.charAt(0).toUpperCase()+t.slice(1)}DefaultValue`,u=`display${t.charAt(0).toUpperCase()+t.slice(1)}DateFormat`;if(this.plugin.settings[l]&&(new r.Setting(e).setName(`Add '${t}'`).setDesc(`Automatically add a '${t}' property to the note's frontmatter.`).addToggle(o=>o.setValue(this.plugin.settings[i]).onChange(async d=>{this.plugin.settings[i]=d,await this.plugin.saveSettings(),this.display()})),this.plugin.settings[i]&&t!=="title")){let o=new r.Setting(e),d="",g="",h="",m=null;["author","project","topic"].includes(t)?(d="The AI prompt to generate this property. The AI will respond with only the value for the property.",m=t+"Prompt",g=q[m],h=this.plugin.settings[m],this.plugin.settings[n]&&(o.setName(`${a} Value/Prompt`).setDesc(d),o.addTextArea(c=>c.setPlaceholder(g).setValue(h).onChange(async x=>{this.plugin.settings[m]=x,await this.plugin.saveSettings()})))):t==="status"?(d="The default value for the status property.",m=t+"DefaultValue",g=q[m],h=this.plugin.settings[m],this.plugin.settings[p]&&(o.setName(`${a} Value/Prompt`).setDesc(d),o.addText(c=>c.setPlaceholder(g).setValue(h).onChange(async x=>{this.plugin.settings[m]=x,await this.plugin.saveSettings()})))):["created","modified"].includes(t)&&(d="The date format for the date. Use YYYY, MM, DD, HH, mm, ss.",m=t+"DateFormat",g=q[m],h=this.plugin.settings[m],this.plugin.settings[u]&&(o.setName(`${a} Date Format`).setDesc(d),o.addText(c=>c.setPlaceholder(g).setValue(h).onChange(async x=>{this.plugin.settings[m]=x,await this.plugin.saveSettings()}))))}}};
